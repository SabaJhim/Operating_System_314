diff --git a/Makefile b/Makefile
index 62fd0f8..0da83ea 100644
--- a/Makefile
+++ b/Makefile
@@ -139,6 +139,7 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_threads\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
diff --git a/kernel/defs.h b/kernel/defs.h
index d1b6bb9..eff08fe 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -82,6 +82,8 @@ void            panic(char*) __attribute__((noreturn));
 void            printfinit(void);
 
 // proc.c
+int             thread_create(uint64 fcn, uint64 arg, uint64 stack);
+int             thread_join(int thread_id);
 int             cpuid(void);
 void            exit(int);
 int             fork(void);
@@ -168,6 +170,10 @@ int             uvmcopy(pagetable_t, pagetable_t, uint64);
 void            uvmfree(pagetable_t, uint64);
 void            uvmunmap(pagetable_t, uint64, uint64, int);
 void            uvmclear(pagetable_t, uint64);
+int             uvmmirror(pagetable_t old, pagetable_t new, uint64 sz);
+int             uvmrangemirror(pagetable_t old, pagetable_t new, uint64 src, uint64 size);
+void            uvmunmirror(pagetable_t pagetable, uint64 sz);
+
 pte_t *         walk(pagetable_t, uint64, int);
 uint64          walkaddr(pagetable_t, uint64);
 int             copyout(pagetable_t, uint64, char *, uint64);
diff --git a/kernel/proc.c b/kernel/proc.c
index 58a8a0b..cee116b 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -14,6 +14,8 @@ struct proc *initproc;
 
 int nextpid = 1;
 struct spinlock pid_lock;
+int nextmemid = 1;
+struct spinlock memid_lock;
 
 extern void forkret(void);
 static void freeproc(struct proc *p);
@@ -51,8 +53,10 @@ procinit(void)
   
   initlock(&pid_lock, "nextpid");
   initlock(&wait_lock, "wait_lock");
+  initlock(&memid_lock, "nextmemid");
   for(p = proc; p < &proc[NPROC]; p++) {
       initlock(&p->lock, "proc");
+      initlock(&p->memlock, "mem");
       p->state = UNUSED;
       p->kstack = KSTACK((int) (p - proc));
   }
@@ -61,6 +65,16 @@ procinit(void)
 // Must be called with interrupts disabled,
 // to prevent race with process being moved
 // to a different CPU.
+
+int allocmemid(){
+int memid;
+ acquire(&memid_lock);
+  memid = nextmemid;
+ nextmemid = nextmemid + 1;
+ release(&memid_lock);
+  return memid;
+}
+
 int
 cpuid()
 {
@@ -102,6 +116,8 @@ allocpid()
   return pid;
 }
 
+
+
 // Look in the process table for an UNUSED proc.
 // If found, initialize state required to run in the kernel,
 // and return with p->lock held.
@@ -125,6 +141,7 @@ found:
   p->pid = allocpid();
   p->state = USED;
 
+
   // Allocate a trapframe page.
   if((p->trapframe = (struct trapframe *)kalloc()) == 0){
     freeproc(p);
@@ -152,13 +169,17 @@ found:
 // free a proc structure and the data hanging from it,
 // including user pages.
 // p->lock must be held.
+
+
+
+
 static void
 freeproc(struct proc *p)
 {
   if(p->trapframe)
     kfree((void*)p->trapframe);
   p->trapframe = 0;
-  if(p->pagetable)
+  if(p->pagetable && p->isthread==0)
     proc_freepagetable(p->pagetable, p->sz);
   p->pagetable = 0;
   p->sz = 0;
@@ -169,6 +190,9 @@ freeproc(struct proc *p)
   p->killed = 0;
   p->xstate = 0;
   p->state = UNUSED;
+  p->mem_id = 0;
+  p->isthread = 0;
+  p->sharedlock = 0;
 }
 
 // Create a user page table for a given process, with no user memory,
@@ -254,28 +278,117 @@ userinit(void)
   release(&p->lock);
 }
 
-// Grow or shrink user memory by n bytes.
-// Return 0 on success, -1 on failure.
+
 int
 growproc(int n)
 {
   uint64 sz;
+  uint64 pid,mem_id;
   struct proc *p = myproc();
 
+  acquire(&p->lock);
+  pid = p->pid;
+  mem_id=p->mem_id;
+  release(&p->lock);
+  acquire(p->sharedlock);
   sz = p->sz;
   if(n > 0){
+    uint64 old_sz=sz;
     if((sz = uvmalloc(p->pagetable, sz, sz + n, PTE_W)) == 0) {
+      release(p->sharedlock);
       return -1;
     }
+    else{
+      for(struct proc *iterator = proc; iterator < &proc[NPROC]; ++iterator){
+        if(iterator->pid != pid && iterator->mem_id == mem_id){
+          uvmrangemirror(p->pagetable, iterator->pagetable, PGROUNDUP(old_sz), sz);
+          iterator->sz = sz;
+        }
+      }
+    }
   } else if(n < 0){
+    uint64 old_sz=sz;
     sz = uvmdealloc(p->pagetable, sz, sz + n);
+    for(struct proc *iterator = proc; iterator < &proc[NPROC]; ++iterator){
+        if(iterator->pid != pid && iterator->mem_id == mem_id){
+          uvmunmap(iterator->pagetable, PGROUNDUP(sz),(PGROUNDUP(old_sz) - PGROUNDUP(sz))/PGSIZE, 0);
+          iterator->sz = sz;
+        }
+      }
   }
   p->sz = sz;
+  release(p->sharedlock);
   return 0;
 }
 
+
 // Create a new process, copying the parent.
 // Sets up child kernel stack to return as if from fork() system call.
+int thread_create(uint64 fcn, uint64 arg, uint64 stack){
+  int i, pid;
+  struct proc *np;
+  struct proc *p = myproc();
+  uint64 sp=stack+4096;
+  sp=sp-(sp%16);
+
+  // Allocate thread
+  if((np = allocproc()) == 0){
+    return -1;
+  }
+  np->mem_id = p->mem_id;
+  np->sharedlock = p->sharedlock;
+  
+
+  // Copy user memory from parent to child.
+  acquire(p->sharedlock);
+  if(uvmmirror(p->pagetable, np->pagetable, p->sz) < 0){
+    freeproc(np);
+    release(&np->lock);
+    return -1;
+  }
+  release(p->sharedlock);
+  
+  np->sz = p->sz;
+
+  // copy saved user registers.
+  *(np->trapframe) = *(p->trapframe);
+
+  np->isthread=1;
+  np->trapframe->sp=sp;
+  np->trapframe->epc=fcn;
+  np->trapframe->a0=arg;
+  np->trapframe->ra=0xffffffff;
+
+  
+
+
+  // increment reference counts on open file descriptors.
+  for(i = 0; i < NOFILE; i++)
+    if(p->ofile[i])
+      np->ofile[i] = filedup(p->ofile[i]);
+  np->cwd = idup(p->cwd);
+
+  safestrcpy(np->name, p->name, sizeof(p->name));
+
+  pid = np->pid;
+
+  release(&np->lock);
+
+  acquire(&wait_lock);
+  np->parent = p;
+  release(&wait_lock);
+
+  acquire(&np->lock);
+  np->state = RUNNABLE;
+  release(&np->lock);
+  //printf("pid %d\n",pid);
+
+  //printf("Error ki ekhane khaccho?\n");
+  return pid;
+}
+
+
+
 int
 fork(void)
 {
@@ -287,7 +400,9 @@ fork(void)
   if((np = allocproc()) == 0){
     return -1;
   }
-
+  
+  np->mem_id = allocmemid();
+  np->sharedlock = &np->memlock;
   // Copy user memory from parent to child.
   if(uvmcopy(p->pagetable, np->pagetable, p->sz) < 0){
     freeproc(np);
@@ -385,6 +500,49 @@ exit(int status)
   panic("zombie exit");
 }
 
+
+
+int
+thread_join(int thread_id)
+{
+  struct proc *pp;
+  int havekids, pid;
+  struct proc *p = myproc();
+
+  acquire(&wait_lock);
+
+  for(;;){
+    // Scan through table looking for exited children.
+    havekids = 0;
+    for(pp = proc; pp < &proc[NPROC]; pp++){
+      if(pp->parent == p ){
+        // make sure the child isn't still in exit() or swtch().
+        acquire(&pp->lock);
+
+        havekids = 1;
+        if(pp->state == ZOMBIE && pp->pid==thread_id && pp->isthread==1){
+          // Found one.
+          pid = pp->pid;
+          freeproc(pp);
+          release(&pp->lock);
+          release(&wait_lock);
+          return pid;
+        }
+        release(&pp->lock);
+      }
+    }
+
+    // No point waiting if we don't have any children.
+    if(!havekids || killed(p)){
+      release(&wait_lock);
+      return -1;
+    }
+    
+    // Wait for a child to exit.
+    sleep(p, &wait_lock);  //DOC: wait-sleep
+  }
+}
+
 // Wait for a child process to exit and return its pid.
 // Return -1 if this process has no children.
 int
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..1abe024 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -90,7 +90,8 @@ struct proc {
   void *chan;                  // If non-zero, sleeping on chan
   int killed;                  // If non-zero, have been killed
   int xstate;                  // Exit status to be returned to parent's wait
-  int pid;                     // Process ID
+  int pid;  
+  int isthread;                   // Process ID
 
   // wait_lock must be held when using this:
   struct proc *parent;         // Parent process
@@ -103,5 +104,8 @@ struct proc {
   struct context context;      // swtch() here to run process
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
-  char name[16];               // Process name (debugging)
+  char name[16];  
+  int mem_id;  
+  struct spinlock memlock; 
+  struct spinlock* sharedlock;          // Process name (debugging)
 };
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..d687ffd 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,6 +101,9 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_thread_create(void);
+extern uint64 sys_thread_join(void);
+extern uint64 sys_thread_exit(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,6 +129,9 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_thread_create] sys_thread_create,
+[SYS_thread_join] sys_thread_join,
+[SYS_thread_exit] sys_thread_exit,
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..b6abf3a 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,6 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_thread_create 22
+#define SYS_thread_join 23
+#define SYS_thread_exit 24
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 3b4d5bd..35d6ced 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -91,3 +91,31 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+
+
+
+uint64 sys_thread_create(void){
+  uint64 fcn, arg, stack,pid;
+  argaddr(0, &fcn);
+  argaddr(1, &arg);
+  argaddr(2, &stack);
+  //printf("pid\n");
+  pid=thread_create(fcn,arg,stack);
+  //printf("Naki error ekhane khaccho?\n");
+  return pid;
+
+}
+
+uint64 sys_thread_join(void){
+  int n;
+  argint(0, &n);
+  uint64 m=thread_join(n);
+  return m;
+}
+
+uint64 sys_thread_exit(void){
+  //printf("Naki error ekhane khaccho?\n");
+  exit(0);
+  return 0;
+}
diff --git a/kernel/vm.c b/kernel/vm.c
index 5c31e87..a098968 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -309,6 +309,59 @@ uvmfree(pagetable_t pagetable, uint64 sz)
 // physical memory.
 // returns 0 on success, -1 on failure.
 // frees any allocated pages on failure.
+int
+uvmmirror(pagetable_t old, pagetable_t new, uint64 sz)
+{
+  pte_t *pte;
+  uint64 pa, i;
+  uint flags;
+
+  for(i = 0; i < sz; i += PGSIZE){
+    if((pte = walk(old, i, 0)) == 0)
+      panic("uvmcopy: pte should exist");
+    if((*pte & PTE_V) == 0)
+      panic("uvmcopy: page not present");
+    pa = PTE2PA(*pte);
+    flags = PTE_FLAGS(*pte);
+    if(mappages(new, i, PGSIZE,pa, flags) != 0){
+      kfree((void*)pa);
+      goto err;
+    }
+  }
+  return 0;
+
+ err:
+  uvmunmap(new, 0, i / PGSIZE, 1);
+  return -1;
+}
+
+
+int uvmrangemirror(pagetable_t old, pagetable_t new, uint64 src, uint64 size)
+{
+  pte_t *pte;
+  uint64 pa, i;
+  uint flags;
+
+  for(i = src; i < size; i += PGSIZE){
+    if((pte = walk(old, i, 0)) == 0)
+     panic("uvmmirror: pte should exist");
+   if((*pte & PTE_V) == 0)
+     panic("uvmmirror: page not present");
+   pa = PTE2PA(*pte);
+    flags = PTE_FLAGS(*pte);
+    if(mappages(new, i, PGSIZE, (uint64)pa, flags) != 0){
+      goto err;
+   }
+  }
+  return 0;
+
+err:
+  return -1;
+}
+
+
+
+
 int
 uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
 {
diff --git a/user/threads.c b/user/threads.c
new file mode 100644
index 0000000..1847629
--- /dev/null
+++ b/user/threads.c
@@ -0,0 +1,120 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+struct balance {
+char name[32];
+int amount;
+};
+
+struct thread_spinlock{
+        int locked;
+
+};
+
+void thread_spin_init(struct thread_spinlock *lk)
+{
+  lk->locked = 0;
+}
+
+void thread_spin_lock(struct thread_spinlock *lk)
+{
+  while(__sync_lock_test_and_set(&lk->locked, 1) != 0);
+  __sync_synchronize();
+
+}
+
+void thread_spin_unlock(struct thread_spinlock *lk)
+{
+  __sync_synchronize();
+  __sync_lock_release(&lk->locked);
+
+}
+
+struct thread_mutex{
+        int locked;
+
+};
+
+void thread_mutex_init(struct thread_mutex *lk)
+{
+  lk->locked = 0;
+}
+
+void thread_mutex_lock(struct thread_mutex *lk)
+{
+  while(__sync_lock_test_and_set(&lk->locked, 1) != 0){
+    sleep(1);
+  }
+
+  __sync_synchronize();
+
+}
+
+void thread_mutex_unlock(struct thread_mutex *lk)
+{
+  __sync_synchronize();
+  __sync_lock_release(&lk->locked);
+
+}
+
+struct thread_spinlock lock;
+struct thread_mutex mlock;
+struct thread_spinlock printlock;
+
+
+
+volatile int total_balance = 0;
+volatile unsigned int delay (unsigned int d) {
+        unsigned int i;
+        for (i = 0; i < d; i++) {
+        __asm volatile( "nop" ::: );
+        }
+        return i;
+}
+
+void do_work(void *arg){
+        int i;
+        int old;
+        struct balance *b = (struct balance*) arg;
+        thread_spin_lock(&printlock);
+        printf( "Starting do_work: s:%s\n", b->name);
+        thread_spin_unlock(&printlock);
+        for (i = 0; i < b->amount; i++) {
+        thread_spin_lock(&lock);
+        //thread_mutex_lock(&mlock);
+        old = total_balance;
+        delay(10000);
+        total_balance = old + 1;
+        //thread_mutex_unlock(&mlock);
+        thread_spin_unlock(&lock);
+        }
+        thread_spin_lock(&printlock);
+        printf( "Done s:%s\n", b->name);
+        thread_spin_unlock(&printlock);
+        thread_exit();
+        return;
+        }
+
+int main(int argc, char *argv[]) {
+        struct balance b1 = {"b1", 2800};
+        struct balance b2 = {"b2", 3200};
+        void *s1,*s2;
+        int thread1,thread2,r1,r2;
+        thread_spin_init(&lock);
+        thread_spin_init(&printlock);
+        thread_mutex_init(&mlock);
+        s1 = malloc(4096); // 4096 is the PGSIZE defined in kernel/riscv.h 
+        s2 = malloc(4096);
+        memset(s1, 0, 4096);
+        memset(s2, 0, 4096);
+        
+        thread1 = thread_create(do_work, (void*)&b1, s1);
+        thread2 = thread_create(do_work, (void*)&b2, s2);
+        r1 = thread_join(thread1);
+        r2 = thread_join(thread2);
+        printf("Threads finished: (%d):%d, (%d):%d, shared balance:%d\n",
+        thread1, r1, thread2, r2, total_balance);
+      
+        exit(0);
+}
\ No newline at end of file
diff --git a/user/user.h b/user/user.h
index 04013ca..b77076e 100644
--- a/user/user.h
+++ b/user/user.h
@@ -39,3 +39,7 @@ void free(void*);
 int atoi(const char*);
 int memcmp(const void *, const void *, uint);
 void *memcpy(void *, const void *, uint);
+int thread_create(void(*fcn)(void*), void *arg, void*stack);
+int thread_join(int thread_id);
+void thread_exit(void);
+
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..a334aa7 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,6 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("thread_create");
+entry("thread_join");
+entry("thread_exit");
